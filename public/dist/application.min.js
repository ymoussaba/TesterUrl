"use strict";
var ApplicationConfiguration = function () {
    var applicationModuleName = "testkit", applicationModuleVendorDependencies = ["ngResource", "ngCookies", "ngAnimate", "ngTouch", "ngSanitize", "ui.router", "ui.bootstrap", "ui.utils", "ngClipboard", "blockUI"], registerModule = function (moduleName, dependencies) {
        angular.module(moduleName, dependencies || []), angular.module(applicationModuleName).requires.push(moduleName)
    };
    return {
        applicationModuleName: applicationModuleName,
        applicationModuleVendorDependencies: applicationModuleVendorDependencies,
        registerModule: registerModule
    }
}();
angular.module(ApplicationConfiguration.applicationModuleName, ApplicationConfiguration.applicationModuleVendorDependencies), angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider", function ($locationProvider) {
    $locationProvider.hashPrefix("!")
}]), angular.element(document).ready(function () {
    "#_=_" === window.location.hash && (window.location.hash = "#!"), angular.bootstrap(document, [ApplicationConfiguration.applicationModuleName])
}), ApplicationConfiguration.registerModule("core"), ApplicationConfiguration.registerModule("requests"), ApplicationConfiguration.registerModule("responses"), ApplicationConfiguration.registerModule("urls"), ApplicationConfiguration.registerModule("users"), angular.module("core").config(["$stateProvider", "$urlRouterProvider", "ngClipProvider", function ($stateProvider, $urlRouterProvider, ngClipProvider) {
    $urlRouterProvider.otherwise("/"), $stateProvider.state("home", {
        url: "/",
        templateUrl: "modules/core/views/home.client.view.html"
    }), ngClipProvider.setPath("/lib/zeroclipboard/dist/ZeroClipboard.swf")
}]), angular.module("core").controller("HeaderController", ["$scope", "Authentication", "Menus", function ($scope, Authentication, Menus) {
    $scope.authentication = Authentication, $scope.isCollapsed = !1, $scope.menu = Menus.getMenu("topbar"), $scope.toggleCollapsibleMenu = function () {
        $scope.isCollapsed = !$scope.isCollapsed
    }, $scope.$on("$stateChangeSuccess", function () {
        $scope.isCollapsed = !1
    })
}]), angular.module("core").controller("HomeController", ["$scope", "Authentication", function ($scope, Authentication) {
    $scope.authentication = Authentication
}]), angular.module("core").service("Menus", [function () {
    this.defaultRoles = ["*"], this.menus = {};
    var shouldRender = function (user) {
        if (!user)return this.isPublic;
        if (~this.roles.indexOf("*"))return !0;
        for (var userRoleIndex in user.roles)for (var roleIndex in this.roles)if (this.roles[roleIndex] === user.roles[userRoleIndex])return !0;
        return !1
    };
    this.validateMenuExistance = function (menuId) {
        if (menuId && menuId.length) {
            if (this.menus[menuId])return !0;
            throw new Error("Menu does not exists")
        }
        throw new Error("MenuId was not provided")
    }, this.getMenu = function (menuId) {
        return this.validateMenuExistance(menuId), this.menus[menuId]
    }, this.addMenu = function (menuId, isPublic, roles) {
        return this.menus[menuId] = {
            isPublic: isPublic || !1,
            roles: roles || this.defaultRoles,
            items: [],
            shouldRender: shouldRender
        }, this.menus[menuId]
    }, this.removeMenu = function (menuId) {
        this.validateMenuExistance(menuId), delete this.menus[menuId]
    }, this.addMenuItem = function (menuId, menuItemTitle, menuItemURL, menuItemType, menuItemUIRoute, isPublic, roles, position) {
        return this.validateMenuExistance(menuId), this.menus[menuId].items.push({
            title: menuItemTitle,
            link: menuItemURL,
            menuItemType: menuItemType || "item",
            menuItemClass: menuItemType,
            uiRoute: menuItemUIRoute || "/" + menuItemURL,
            isPublic: null === isPublic || "undefined" == typeof isPublic ? this.menus[menuId].isPublic : isPublic,
            roles: null === roles || "undefined" == typeof roles ? this.menus[menuId].roles : roles,
            position: position || 0,
            items: [],
            shouldRender: shouldRender
        }), this.menus[menuId]
    }, this.addSubMenuItem = function (menuId, rootMenuItemURL, menuItemTitle, menuItemURL, menuItemUIRoute, isPublic, roles, position) {
        this.validateMenuExistance(menuId);
        for (var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link === rootMenuItemURL && this.menus[menuId].items[itemIndex].items.push({
            title: menuItemTitle,
            link: menuItemURL,
            uiRoute: menuItemUIRoute || "/" + menuItemURL,
            isPublic: null === isPublic || "undefined" == typeof isPublic ? this.menus[menuId].items[itemIndex].isPublic : isPublic,
            roles: null === roles || "undefined" == typeof roles ? this.menus[menuId].items[itemIndex].roles : roles,
            position: position || 0,
            shouldRender: shouldRender
        });
        return this.menus[menuId]
    }, this.removeMenuItem = function (menuId, menuItemURL) {
        this.validateMenuExistance(menuId);
        for (var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link === menuItemURL && this.menus[menuId].items.splice(itemIndex, 1);
        return this.menus[menuId]
    }, this.removeSubMenuItem = function (menuId, submenuItemURL) {
        this.validateMenuExistance(menuId);
        for (var itemIndex in this.menus[menuId].items)for (var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link === submenuItemURL && this.menus[menuId].items[itemIndex].items.splice(subitemIndex, 1);
        return this.menus[menuId]
    }, this.addMenu("topbar")
}]), angular.module("requests").run(["Menus", function (Menus) {
    Menus.addMenuItem("topbar", "Requests", "requests", "dropdown", "/requests(/create)?"), Menus.addSubMenuItem("topbar", "requests", "List Requests", "requests"), Menus.addSubMenuItem("topbar", "requests", "New Request", "requests/create")
}]), angular.module("requests").config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state("listRequests", {
        url: "/requests",
        templateUrl: "modules/requests/views/list-requests.client.view.html"
    }).state("createRequest", {
        url: "/requests/create",
        templateUrl: "modules/requests/views/create-request.client.view.html"
    }).state("viewRequest", {
        url: "/requests/:requestId",
        templateUrl: "modules/requests/views/view-request.client.view.html"
    }).state("editRequest", {
        url: "/requests/:requestId/edit",
        templateUrl: "modules/requests/views/edit-request.client.view.html"
    })
}]), angular.module("requests").controller("RequestsController", ["$scope", "$stateParams", "$location", "Authentication", "Requests", "responses", function ($scope, $stateParams, $location, Authentication, Requests) {
    $scope.authentication = Authentication, $scope.create = function () {
        var request = new Requests({name: this.name});
        request.$save(function (response) {
            $location.path("requests/" + response._id), $scope.name = ""
        }, function (errorResponse) {
            $scope.error = errorResponse.data.message
        })
    }, $scope.remove = function (request) {
        if (request) {
            request.$remove();
            for (var i in $scope.requests)$scope.requests[i] === request && $scope.requests.splice(i, 1)
        } else $scope.request.$remove(function () {
            $location.path("requests")
        })
    }, $scope.update = function () {
        var request = $scope.request;
        request.$update(function () {
            $location.path("requests/" + request._id)
        }, function (errorResponse) {
            $scope.error = errorResponse.data.message
        })
    }, $scope.find = function () {
        $scope.requests = Requests.query()
    }, $scope.findOne = function () {
        $scope.request = Requests.get({requestId: $stateParams.requestId})
    }
}]), angular.module("requests").factory("Requests", ["$resource", function ($resource) {
    return $resource("requests/:requestId", {requestId: "@_id"}, {update: {method: "PUT"}})
}]), angular.module("responses").run(["Menus", function (Menus) {
    Menus.addMenuItem("topbar", "Responses", "responses", "dropdown", "/responses(/create)?"), Menus.addSubMenuItem("topbar", "responses", "List Responses", "responses"), Menus.addSubMenuItem("topbar", "responses", "New Response", "responses/create")
}]), angular.module("responses").config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state("listResponses", {
        url: "/responses",
        templateUrl: "modules/responses/views/list-responses.client.view.html"
    }).state("createResponse", {
        url: "/responses/create/:responseId",
        templateUrl: "modules/responses/views/create-response.client.view.html"
    }).state("viewResponse", {
        url: "/responses/:responseId",
        templateUrl: "modules/responses/views/view-response.client.view.html"
    }).state("editResponse", {
        url: "/responses/:responseId/edit",
        templateUrl: "modules/responses/views/edit-response.client.view.html"
    })
}]), angular.module("responses").controller("ResponsesController", ["$scope", "$stateParams", "$http", "$location", "Authentication", "Responses", "blockUI", "Notify", "Urls", function ($scope, $stateParams, $http, $location, Authentication, Responses, blockUI, Notify) {
    $scope.authentication = Authentication, $scope.create = function () {
        var id = $location.$$url.split("/")[3];
        $http.post("/responses/" + id, {body: $scope.responseText}).success(function (data) {
            console.log(data)
        }).error(function (data) {
            console.log(data)
        })
    }, $scope.remove = function (response) {
        if (response) {
            response.$remove();
            for (var i in $scope.responses)$scope.responses[i] === response && $scope.responses.splice(i, 1)
        } else $scope.response.$remove(function () {
            $location.path("responses")
        })
    }, $scope.update = function () {
        var response = $scope.response;
        response.$update(function () {
            $location.path("responses/" + response._id)
        }, function (errorResponse) {
            $scope.error = errorResponse.data.message
        })
    }, $scope.find = function () {
        $scope.responses = Responses.query()
    }, $scope.ready = function () {
        blockUI.start("Make a request already :)");
        var id = $location.$$url.split("/")[3];
        Notify.sendMsg("Waiting", {id: id}), $scope.$on("Received", function () {
            blockUI.stop()
        })
    }, $scope.findOne = function () {
        $scope.response = Responses.get({responseId: $stateParams.responseId})
    }
}]), angular.module("responses").factory("Responses", ["$resource", function ($resource) {
    return $resource("responses/:responseId", {responseId: "@_id"}, {update: {method: "PUT"}})
}]).factory("Notify", ["$rootScope", "$http", function ($rootScope, $http) {
    var notify = {};
    return notify.sendMsg = function (msg, data) {
        "Waiting" === msg && $http.post("/responses/" + data.id).success(function (data) {
            console.log(data), $http.get("/requests/" + data._id).success(function (data) {
                console.log(data), $rootScope.$broadcast("Received")
            })
        }).error(function (data) {
            console.log(data)
        })
    }, notify
}]), angular.module("urls").run(["Menus", function (Menus) {
    Menus.addMenuItem("topbar", "Urls", "urls", "dropdown", "/urls(/create)?"), Menus.addSubMenuItem("topbar", "urls", "List Urls", "urls"), Menus.addSubMenuItem("topbar", "urls", "New Url", "urls/create")
}]), angular.module("urls").config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state("listUrls", {
        url: "/urls",
        templateUrl: "modules/urls/views/list-urls.client.view.html"
    }).state("createUrl", {
        url: "/urls/create",
        templateUrl: "modules/urls/views/create-url.client.view.html"
    }).state("viewUrl", {
        url: "/urls/:urlId",
        templateUrl: "modules/urls/views/view-url.client.view.html"
    }).state("editUrl", {url: "/urls/:urlId/edit", templateUrl: "modules/urls/views/edit-url.client.view.html"})
}]), angular.module("urls").controller("UrlsController", ["$scope", "$stateParams", "$location", "Authentication", "Urls", function ($scope, $stateParams, $location, Authentication, Urls) {
    $scope.authentication = Authentication, $scope.create = function () {
        var url = new Urls({name: this.name});
        url.$save(function (response) {
            $location.path("urls/" + response._id), $scope.name = ""
        }, function (errorResponse) {
            $scope.error = errorResponse.data.message
        })
    }, $scope.findOne = function () {
        Urls.myId = $stateParams.urlId, $scope.id = $stateParams.urlId, $scope.url = Urls.get({urlId: $stateParams.urlId}, function () {
            $scope.url.value = "http://" + $location.$$host + ":" + $location.$$port + "/r/" + $stateParams.urlId
        })
    }
}]), angular.module("urls").factory("Urls", ["$resource", function ($resource) {
    return $resource("urls/:urlId", {urlId: "@_id"}, {update: {method: "PUT"}})
}]), angular.module("users").config(["$httpProvider", function ($httpProvider) {
    $httpProvider.interceptors.push(["$q", "$location", "Authentication", function ($q, $location, Authentication) {
        return {
            responseError: function (rejection) {
                switch (rejection.status) {
                    case 401:
                        Authentication.user = null, $location.path("signin");
                        break;
                    case 403:
                }
                return $q.reject(rejection)
            }
        }
    }])
}]), angular.module("users").config(["$stateProvider", function ($stateProvider) {
    $stateProvider.state("profile", {
        url: "/settings/profile",
        templateUrl: "modules/users/views/settings/edit-profile.client.view.html"
    }).state("password", {
        url: "/settings/password",
        templateUrl: "modules/users/views/settings/change-password.client.view.html"
    }).state("accounts", {
        url: "/settings/accounts",
        templateUrl: "modules/users/views/settings/social-accounts.client.view.html"
    }).state("signup", {
        url: "/signup",
        templateUrl: "modules/users/views/authentication/signup.client.view.html"
    }).state("signin", {
        url: "/signin",
        templateUrl: "modules/users/views/authentication/signin.client.view.html"
    }).state("forgot", {
        url: "/password/forgot",
        templateUrl: "modules/users/views/password/forgot-password.client.view.html"
    }).state("reset-invlaid", {
        url: "/password/reset/invalid",
        templateUrl: "modules/users/views/password/reset-password-invalid.client.view.html"
    }).state("reset-success", {
        url: "/password/reset/success",
        templateUrl: "modules/users/views/password/reset-password-success.client.view.html"
    }).state("reset", {
        url: "/password/reset/:token",
        templateUrl: "modules/users/views/password/reset-password.client.view.html"
    })
}]), angular.module("users").controller("AuthenticationController", ["$scope", "$http", "$location", "Authentication", function ($scope, $http, $location, Authentication) {
    $scope.authentication = Authentication, $scope.authentication.user && $location.path("/"), $scope.signup = function () {
        $http.post("/auth/signup", $scope.credentials).success(function (response) {
            $scope.authentication.user = response, $location.path("/")
        }).error(function (response) {
            $scope.error = response.message
        })
    }, $scope.signin = function () {
        $http.post("/auth/signin", $scope.credentials).success(function (response) {
            $scope.authentication.user = response, $location.path("/")
        }).error(function (response) {
            $scope.error = response.message
        })
    }
}]), angular.module("users").controller("PasswordController", ["$scope", "$stateParams", "$http", "$location", "Authentication", function ($scope, $stateParams, $http, $location, Authentication) {
    $scope.authentication = Authentication, $scope.authentication.user && $location.path("/"), $scope.askForPasswordReset = function () {
        $scope.success = $scope.error = null, $http.post("/auth/forgot", $scope.credentials).success(function (response) {
            $scope.credentials = null, $scope.success = response.message
        }).error(function (response) {
            $scope.credentials = null, $scope.error = response.message
        })
    }, $scope.resetUserPassword = function () {
        $scope.success = $scope.error = null, $http.post("/auth/reset/" + $stateParams.token, $scope.passwordDetails).success(function (response) {
            $scope.passwordDetails = null, Authentication.user = response, $location.path("/password/reset/success")
        }).error(function (response) {
            $scope.error = response.message
        })
    }
}]), angular.module("users").controller("SettingsController", ["$scope", "$http", "$location", "Users", "Authentication", function ($scope, $http, $location, Users, Authentication) {
    $scope.user = Authentication.user, $scope.user || $location.path("/"), $scope.hasConnectedAdditionalSocialAccounts = function () {
        for (var i in $scope.user.additionalProvidersData)return !0;
        return !1
    }, $scope.isConnectedSocialAccount = function (provider) {
        return $scope.user.provider === provider || $scope.user.additionalProvidersData && $scope.user.additionalProvidersData[provider]
    }, $scope.removeUserSocialAccount = function (provider) {
        $scope.success = $scope.error = null, $http.delete("/users/accounts", {params: {provider: provider}}).success(function (response) {
            $scope.success = !0, $scope.user = Authentication.user = response
        }).error(function (response) {
            $scope.error = response.message
        })
    }, $scope.updateUserProfile = function (isValid) {
        if (isValid) {
            $scope.success = $scope.error = null;
            var user = new Users($scope.user);
            user.$update(function (response) {
                $scope.success = !0, Authentication.user = response
            }, function (response) {
                $scope.error = response.data.message
            })
        } else $scope.submitted = !0
    }, $scope.changeUserPassword = function () {
        $scope.success = $scope.error = null, $http.post("/users/password", $scope.passwordDetails).success(function () {
            $scope.success = !0, $scope.passwordDetails = null
        }).error(function (response) {
            $scope.error = response.message
        })
    }
}]), angular.module("users").factory("Authentication", [function () {
    var _this = this;
    return _this._data = {user: window.user}, _this._data
}]), angular.module("users").factory("Users", ["$resource", function ($resource) {
    return $resource("users", {}, {update: {method: "PUT"}})
}]);
